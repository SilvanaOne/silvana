syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "silvana/options/v1/options.proto";

package silvana.rpc.v1;

option go_package = "github.com/SilvanaOne/silvana/proto;events";

// Log level enumeration for messages
enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_DEBUG = 1;
  LOG_LEVEL_INFO = 2;
  LOG_LEVEL_WARN = 3;
  LOG_LEVEL_ERROR = 4;
  LOG_LEVEL_FATAL = 5;
}

// Job result enumeration
enum JobResult {
  JOB_RESULT_UNSPECIFIED = 0;
  JOB_RESULT_COMPLETED = 1;
  JOB_RESULT_FAILED = 2;
  JOB_RESULT_TERMINATED = 3;
}

// Job result enumeration
enum ProofEventType {
  PROOF_EVENT_TYPE_UNSPECIFIED = 0;
  PROOF_SUBMITTED = 1;
  PROOF_FETCHED = 2;
  PROOF_VERIFIED = 3;
  PROOF_UNAVAILABLE = 5;
  PROOF_REJECTED = 6;
}


// Coordinator Events
message CoordinatorStartedEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string ethereum_address = 2;
  uint64 event_timestamp = 3;
}

message CoordinatorActiveEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 2;
}

message CoordinatorShutdownEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 2;
}

message AgentSessionStartedEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string developer = 2 [ (silvana.options.v1.search) = true];
  string agent = 3 [ (silvana.options.v1.search) = true];
  string agent_method = 4 [ (silvana.options.v1.search) = true];
  string session_id = 5 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 6;
}

message AgentSessionFinishedEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string session_id = 2 [ (silvana.options.v1.search) = true];
  string session_log = 3;
  uint64 duration = 4;
  uint64 cost = 5;
  uint64 event_timestamp = 6;
}

message JobCreatedEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string session_id = 2 [ (silvana.options.v1.search) = true];
  string app_instance_id = 3 [ (silvana.options.v1.search) = true];
  string app_method = 4 [ (silvana.options.v1.search) = true];
  uint64 job_sequence = 5 [ (silvana.options.v1.search) = true];
  repeated uint64 sequences = 6 [ (silvana.options.v1.sequences) = true];
  repeated uint64 merged_sequences_1 = 7 [ (silvana.options.v1.sequences) = true];
  repeated uint64 merged_sequences_2 = 8 [ (silvana.options.v1.sequences) = true];
  string job_id = 9 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 10;
}

message JobStartedEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string session_id = 2 [ (silvana.options.v1.search) = true];
  string app_instance_id = 3 [ (silvana.options.v1.search) = true];
  string job_id = 4 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 5;
}

message JobFinishedEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string job_id = 2 [ (silvana.options.v1.search) = true];
  uint64 duration = 3;
  uint64 cost = 4;
  uint64 event_timestamp = 5;
  JobResult result = 6;
}

message CoordinationTxEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string tx_hash = 2 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 3;
}

message CoordinatorMessageEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 2;
  LogLevel level = 3;
  string message = 4 [ (silvana.options.v1.search) = true];
}

message ProofEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string session_id = 2 [ (silvana.options.v1.search) = true];
  string app_instance_id = 3 [ (silvana.options.v1.search) = true];
  string job_id = 4 [ (silvana.options.v1.search) = true];
  string data_availability = 5;
  uint64 block_number = 6;
  optional bool block_proof = 7;
  ProofEventType proof_event_type = 8;
  repeated uint64 sequences = 9 [ (silvana.options.v1.sequences) = true];
  repeated uint64 merged_sequences_1 = 10 [ (silvana.options.v1.sequences) = true];
  repeated uint64 merged_sequences_2 = 11 [ (silvana.options.v1.sequences) = true];
  uint64 event_timestamp = 12;
}

message SettlementTransactionEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string session_id = 2 [ (silvana.options.v1.search) = true];
  string app_instance_id = 3 [ (silvana.options.v1.search) = true];
  string chain = 4;
  string job_id = 5 [ (silvana.options.v1.search) = true];
  uint64 block_number = 6;
  string tx_hash = 7 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 8;
}

message SettlementTransactionIncludedInBlockEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string session_id = 2 [ (silvana.options.v1.search) = true];
  string app_instance_id = 3 [ (silvana.options.v1.search) = true];
  string chain = 4;
  string job_id = 5 [ (silvana.options.v1.search) = true];
  uint64 block_number = 6;
  uint64 event_timestamp = 7;
}

// Agent Events
message AgentMessageEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string session_id = 2 [ (silvana.options.v1.search) = true];
  optional string job_id = 3 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 4;
  LogLevel level = 5;
  string message = 6 [ (silvana.options.v1.search) = true];
}

// Main event wrapper
message Event {
  oneof event {
    // Coordinator lifecycle events
    CoordinatorStartedEvent coordinator_started = 1;
    CoordinatorActiveEvent coordinator_active = 2;
    CoordinatorShutdownEvent coordinator_shutdown = 3;

    // Session and job events
    AgentSessionStartedEvent agent_session_started = 4;
    AgentSessionFinishedEvent agent_session_finished = 14;
    JobCreatedEvent job_created = 5;
    JobStartedEvent job_started = 6;
    JobFinishedEvent job_finished = 7;

    // Transaction and proof events
    CoordinationTxEvent coordination_tx = 8;
    ProofEvent proof_event = 9;
    SettlementTransactionEvent settlement_transaction = 10;
    SettlementTransactionIncludedInBlockEvent settlement_transaction_included = 11;

    // Message events
    CoordinatorMessageEvent coordinator_message = 12;
    AgentMessageEvent agent_message = 13;
  }
}

// Batch events request
message SubmitEventsRequest {
  repeated Event events = 1;
}

message SubmitEventsResponse {
  bool success = 1;
  string message = 2;
  uint32 processed_count = 3;
}

// New messages for single-event submission
message SubmitEventRequest {
  Event event = 1;
}

message SubmitEventResponse {
  bool success = 1;
  string message = 2;
  uint32 processed_count = 3;
}

// Query request/response messages for getting events by sequence
message GetEventsByAppInstanceSequenceRequest {
  string app_instance_id = 1;
  uint64 sequence = 2;
  optional uint32 limit = 3;    // Optional pagination limit
  optional uint32 offset = 4;   // Optional pagination offset
  
}


message GetEventsByAppInstanceSequenceResponse {
  bool success = 1;
  string message = 2;
  repeated Event events = 3;
  uint32 total_count = 4;    // Total matching events (for pagination)
  uint32 returned_count = 5; // Number of events in this response
}

// Full-text search request/response messages for CoordinatorMessageEvent
message SearchEventsRequest {
  string search_query = 1;              // Search terms for full-text search
  optional uint32 limit = 2;            // Optional limit per fulltext index
}

message EventWithRelevance {
  int64 id = 1;                          // Database ID
  Event event = 2;
  double relevance_score = 3;            // TiDB FTS relevance score (BM25)
}

message SearchEventsResponse {
  bool success = 1;
  string message = 2;
  repeated EventWithRelevance events = 3;
}

// Proof cache messages

// Quilt piece for bundling multiple proofs
message QuiltPiece {
  string identifier = 1;
  string data = 2;
}

message SubmitProofRequest {
  oneof data {
    string proof_data = 1;           // Single proof data
    QuiltData quilt_data = 4;        // Multiple proofs as a quilt
  }
  map<string, string> metadata = 2;
  optional uint64 expires_at = 3;  // Unix timestamp in milliseconds
}

message QuiltData {
  repeated QuiltPiece pieces = 1;
}

message SubmitProofResponse {
  bool success = 1;
  string message = 2;
  string proof_hash = 3;  // The hash of the submitted proof or quilt
  repeated string quilt_piece_ids = 4;  // Optional: IDs of individual quilt pieces
}

message GetProofRequest {
  string proof_hash = 1;
  optional string block_number = 2;  // Optional: for quilts, get specific block's proof
}

message GetProofResponse {
  bool success = 1;
  string message = 2;
  string proof_data = 3;
  map<string, string> metadata = 4;
  bool is_quilt = 5;  // Indicates if this is a quilt
  repeated QuiltPiece quilt_pieces = 6;  // If is_quilt=true, contains the pieces
}

// Configuration storage messages

message GetConfigRequest {
  string chain = 1;  // Chain identifier (testnet/devnet/mainnet)
}

message GetConfigResponse {
  bool success = 1;
  string message = 2;
  map<string, string> config = 3;  // Key-value configuration pairs
}

message WriteConfigRequest {
  string chain = 1;  // Chain identifier (testnet/devnet/mainnet)
  map<string, string> config = 2;  // Key-value configuration pairs to write
}

message WriteConfigResponse {
  bool success = 1;
  string message = 2;
  uint32 items_written = 3;  // Number of configuration items written
}

// Binary storage messages for S3

message WriteBinaryRequest {
  bytes data = 1;                    // Binary data to store
  string file_name = 2;               // S3 object key/filename
  string mime_type = 3;               // MIME type of the content
  optional string expected_sha256 = 4; // Optional expected SHA256 for verification
  map<string, string> metadata = 5;    // Optional metadata
}

message WriteBinaryResponse {
  bool success = 1;
  string message = 2;
  string sha256 = 3;                   // SHA256 hash of the stored file
  string s3_url = 4;                   // S3 URL/path of the stored file
}

message ReadBinaryRequest {
  string file_name = 1;                // S3 object key/filename to read
}

message ReadBinaryResponse {
  bool success = 1;
  string message = 2;
  bytes data = 3;                      // Binary data retrieved
  string sha256 = 4;                   // SHA256 hash of the data
  string mime_type = 5;                // MIME type if available
  map<string, string> metadata = 6;    // Associated metadata
}

// Secrets storage messages
message SecretReference {
  string developer = 1;
  string agent = 2;
  optional string app = 3;
  optional string app_instance = 4;
  optional string name = 5;
}

message StoreSecretRequest {
  SecretReference reference = 1;
  string secret_value = 2;
  bytes signature = 3;  // Developer signature (not validated yet)
}

message StoreSecretResponse {
  bool success = 1;
  string message = 2;
}

message RetrieveSecretRequest {
  SecretReference reference = 1;
  bytes signature = 2;  // Coordinator signature (not validated yet)
}

message RetrieveSecretResponse {
  bool success = 1;
  string message = 2;
  string secret_value = 3;  // Only returned if success is true
}

// gRPC service definition
service SilvanaRpcService {
  rpc SubmitEvents(SubmitEventsRequest) returns (SubmitEventsResponse);
  rpc SubmitEvent(SubmitEventRequest) returns (SubmitEventResponse);

  // Query methods for retrieving events by sequence
  rpc GetEventsByAppInstanceSequence(GetEventsByAppInstanceSequenceRequest) returns (GetEventsByAppInstanceSequenceResponse);

  // Full-text search methods
  rpc SearchEvents(SearchEventsRequest) returns (SearchEventsResponse);

  // Proof cache methods
  rpc SubmitProof(SubmitProofRequest) returns (SubmitProofResponse);
  rpc GetProof(GetProofRequest) returns (GetProofResponse);

  // Secrets storage methods
  rpc StoreSecret(StoreSecretRequest) returns (StoreSecretResponse);
  rpc RetrieveSecret(RetrieveSecretRequest) returns (RetrieveSecretResponse);

  // Binary storage methods
  rpc WriteBinary(WriteBinaryRequest) returns (WriteBinaryResponse);
  rpc ReadBinary(ReadBinaryRequest) returns (ReadBinaryResponse);

  // Configuration storage methods
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);
  rpc WriteConfig(WriteConfigRequest) returns (WriteConfigResponse);
} 