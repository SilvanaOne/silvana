syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "silvana/options/v1/options.proto";

package silvana.events.v1;

option go_package = "github.com/SilvanaOne/zk-tests/packages/avs/rpc/proto;events";


// Log level enumeration for messages
enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_DEBUG = 1;
  LOG_LEVEL_INFO = 2;
  LOG_LEVEL_WARN = 3;
  LOG_LEVEL_ERROR = 4;
  LOG_LEVEL_FATAL = 5;
}

// Coordinator Events
message CoordinatorStartedEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string ethereum_address = 2;
  string sui_ed25519_address = 3;
  uint64 event_timestamp = 4;
}

message AgentStartedJobEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string developer = 2 [ (silvana.options.v1.search) = true];
  string agent = 3 [ (silvana.options.v1.search) = true];
  string app = 4 [ (silvana.options.v1.search) = true];
  string job_sequence = 5 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 6;
}

message AgentFinishedJobEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string developer = 2 [ (silvana.options.v1.search) = true];
  string agent = 3 [ (silvana.options.v1.search) = true];
  string app = 4 [ (silvana.options.v1.search) = true];
  string job_sequence = 5 [ (silvana.options.v1.search) = true];
  uint64 duration = 6;
  uint64 event_timestamp = 7;
}

message CoordinationTxEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string developer = 2 [ (silvana.options.v1.search) = true];
  string agent = 3 [ (silvana.options.v1.search) = true];
  string app = 4 [ (silvana.options.v1.search) = true];
  string job_sequence = 5 [ (silvana.options.v1.search) = true];
  string memo = 6 [ (silvana.options.v1.search) = true];
  string tx_hash = 7 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 8;
}

message CoordinatorMessageEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  uint64 event_timestamp = 2;
  LogLevel level = 3;
  string message = 4 [ (silvana.options.v1.search) = true];
}

message ClientTransactionEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string developer = 2 [ (silvana.options.v1.search) = true];
  string agent = 3 [ (silvana.options.v1.search) = true];
  string app = 4 [ (silvana.options.v1.search) = true];
  string client_ip_address = 5;
  string method = 6 [ (silvana.options.v1.search) = true];
  bytes data = 7;
  string tx_hash = 8 [ (silvana.options.v1.search) = true];
  uint64 sequence = 9;
  uint64 event_timestamp = 10;
}

// Union type for all coordinator events
message CoordinatorEvent {
  oneof event {
    CoordinatorStartedEvent coordinator_started = 1;
    AgentStartedJobEvent agent_started_job = 2;
    AgentFinishedJobEvent agent_finished_job = 3;
    CoordinationTxEvent coordination_tx = 4;
    CoordinatorMessageEvent coordinator_error = 5;
    ClientTransactionEvent client_transaction = 6;
  }
}

// Agent Events
message AgentMessageEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string developer = 2 [ (silvana.options.v1.search) = true];
  string agent = 3 [ (silvana.options.v1.search) = true];
  string app = 4 [ (silvana.options.v1.search) = true];
  string job_sequence = 5 [ (silvana.options.v1.search) = true];
  repeated uint64 sequences = 6 [ (silvana.options.v1.sequences) = true];
  uint64 event_timestamp = 7;
  LogLevel level = 8;
  string message = 9 [ (silvana.options.v1.search) = true];
}


message AgentTransactionEvent {
  string coordinator_id = 1 [ (silvana.options.v1.search) = true];
  string tx_type = 2 [ (silvana.options.v1.search) = true];
  string developer = 3 [ (silvana.options.v1.search) = true];
  string agent = 4 [ (silvana.options.v1.search) = true];
  string app = 5 [ (silvana.options.v1.search) = true];
  string job_sequence = 6 [ (silvana.options.v1.search) = true];
  repeated uint64 sequences = 7 [ (silvana.options.v1.sequences) = true];
  uint64 event_timestamp = 8;
  string tx_hash = 9 [ (silvana.options.v1.search) = true];
  string chain = 10 [ (silvana.options.v1.search) = true];
  string network = 11 [ (silvana.options.v1.search) = true];
  string memo = 12 [ (silvana.options.v1.search) = true];
  optional string metadata = 13 [ (silvana.options.v1.search) = true]; // JSON string
}

// Union type for all agent events
message AgentEvent {
  oneof event {
    AgentMessageEvent message = 1;
    AgentTransactionEvent transaction = 2;
  }
}

// Main event wrapper
message Event {
  oneof event_type {
    CoordinatorEvent coordinator = 1;
    AgentEvent agent = 2;
  }
}

// Batch events request
message SubmitEventsRequest {
  repeated Event events = 1;
}

message SubmitEventsResponse {
  bool success = 1;
  string message = 2;
  uint32 processed_count = 3;
}

// New messages for single-event submission
message SubmitEventRequest {
  Event event = 1;
}

message SubmitEventResponse {
  bool success = 1;
  string message = 2;
  uint32 processed_count = 3;
}

// Query request/response messages for getting events by sequence
message GetAgentTransactionEventsBySequenceRequest {
  uint64 sequence = 1;
  optional uint32 limit = 2;    // Optional pagination limit
  optional uint32 offset = 3;   // Optional pagination offset
  optional string coordinator_id = 4; // Optional filter by coordinator
  optional string developer = 5;      // Optional filter by developer
  optional string agent = 6;          // Optional filter by agent
  optional string app = 7;            // Optional filter by app
}

message AgentTransactionEventWithId {
  int64 id = 1;                     // Database ID
  string coordinator_id = 2;
  string tx_type = 3;
  string developer = 4;
  string agent = 5;
  string app = 6;
  string job_sequence = 7;
  repeated uint64 sequences = 8;    // All sequences for this event
  uint64 event_timestamp = 9;
  string tx_hash = 10;
  string chain = 11;
  string network = 12;
  string memo = 13;
  string metadata = 14;
  int64 created_at_timestamp = 15;  // Database timestamp
}

message GetAgentTransactionEventsBySequenceResponse {
  bool success = 1;
  string message = 2;
  repeated AgentTransactionEventWithId events = 3;
  uint32 total_count = 4;    // Total matching events (for pagination)
  uint32 returned_count = 5; // Number of events in this response
}

// Query request/response messages for getting agent message events by sequence
message GetAgentMessageEventsBySequenceRequest {
  uint64 sequence = 1;
  optional uint32 limit = 2;
  optional uint32 offset = 3;
  optional string coordinator_id = 4;
  optional string developer = 5;
  optional string agent = 6;
  optional string app = 7;
}

message AgentMessageEventWithId {
  int64 id = 1;
  string coordinator_id = 2;
  string developer = 3;
  string agent = 4;
  string app = 5;
  string job_sequence = 6;
  repeated uint64 sequences = 7;
  uint64 event_timestamp = 8;
  LogLevel level = 9;
  string message = 10;
  int64 created_at_timestamp = 11;
}

message GetAgentMessageEventsBySequenceResponse {
  bool success = 1;
  string message = 2;
  repeated AgentMessageEventWithId events = 3;
  uint32 total_count = 4;
  uint32 returned_count = 5;
}

// Full-text search request/response messages for CoordinatorMessageEvent
message SearchCoordinatorMessageEventsRequest {
  string search_query = 1;              // Search terms for full-text search
  optional uint32 limit = 2;            // Optional pagination limit
  optional uint32 offset = 3;           // Optional pagination offset
  optional string coordinator_id = 4;   // Optional filter by coordinator
}

message CoordinatorMessageEventWithRelevance {
  int64 id = 1;                          // Database ID
  string coordinator_id = 2;
  uint64 event_timestamp = 3;
  LogLevel level = 4;
  string message = 5;
  int64 created_at_timestamp = 6;        // Database timestamp
  double relevance_score = 7;            // TiDB FTS relevance score (BM25)
}

message SearchCoordinatorMessageEventsResponse {
  bool success = 1;
  string message = 2;
  repeated CoordinatorMessageEventWithRelevance events = 3;
  uint32 total_count = 4;                // Total matching events (for pagination)
  uint32 returned_count = 5;             // Number of events in this response
}

// Proof cache messages
message SubmitProofRequest {
  string proof_data = 1;
  map<string, string> metadata = 2;
  optional uint64 expires_at = 3;  // Unix timestamp in milliseconds
}

message SubmitProofResponse {
  bool success = 1;
  string message = 2;
  string proof_hash = 3;  // The hash of the submitted proof
}

message GetProofRequest {
  string proof_hash = 1;
}

message GetProofResponse {
  bool success = 1;
  string message = 2;
  string proof_data = 3;
  map<string, string> metadata = 4;
}

// Secrets storage messages
message SecretReference {
  string developer = 1;
  string agent = 2;
  optional string app = 3;
  optional string app_instance = 4;
  optional string name = 5;
}

message StoreSecretRequest {
  SecretReference reference = 1;
  string secret_value = 2;
  bytes signature = 3;  // Developer signature (not validated yet)
}

message StoreSecretResponse {
  bool success = 1;
  string message = 2;
}

message RetrieveSecretRequest {
  SecretReference reference = 1;
  bytes signature = 2;  // Coordinator signature (not validated yet)
}

message RetrieveSecretResponse {
  bool success = 1;
  string message = 2;
  string secret_value = 3;  // Only returned if success is true
}

// gRPC service definition
service SilvanaEventsService {
  rpc SubmitEvents(SubmitEventsRequest) returns (SubmitEventsResponse);
  rpc SubmitEvent(SubmitEventRequest) returns (SubmitEventResponse);
  
  // Query methods for retrieving events by sequence
  rpc GetAgentTransactionEventsBySequence(GetAgentTransactionEventsBySequenceRequest) returns (GetAgentTransactionEventsBySequenceResponse);
  rpc GetAgentMessageEventsBySequence(GetAgentMessageEventsBySequenceRequest) returns (GetAgentMessageEventsBySequenceResponse);
  
  // Full-text search methods
  rpc SearchCoordinatorMessageEvents(SearchCoordinatorMessageEventsRequest) returns (SearchCoordinatorMessageEventsResponse);
  
  // Proof cache methods
  rpc SubmitProof(SubmitProofRequest) returns (SubmitProofResponse);
  rpc GetProof(GetProofRequest) returns (GetProofResponse);
  
  // Secrets storage methods
  rpc StoreSecret(StoreSecretRequest) returns (StoreSecretResponse);
  rpc RetrieveSecret(RetrieveSecretRequest) returns (RetrieveSecretResponse);
} 