// @generated by protoc-gen-es v2.8.0 with parameter "target=ts"
// @generated from file silvana/rpc/v1/rpc.proto (package silvana.rpc.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_descriptor } from "@bufbuild/protobuf/wkt";
import { file_silvana_options_v1_options } from "../../options/v1/options_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file silvana/rpc/v1/rpc.proto.
 */
export const file_silvana_rpc_v1_rpc: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_descriptor, file_silvana_options_v1_options]);

/**
 * Coordinator Events
 *
 * @generated from message silvana.rpc.v1.CoordinatorStartedEvent
 */
export type CoordinatorStartedEvent = Message<"silvana.rpc.v1.CoordinatorStartedEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string ethereum_address = 2;
   */
  ethereumAddress: string;

  /**
   * @generated from field: uint64 event_timestamp = 3;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.CoordinatorStartedEvent.
 * Use `create(CoordinatorStartedEventSchema)` to create a new message.
 */
export const CoordinatorStartedEventSchema: GenMessage<CoordinatorStartedEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 0);

/**
 * @generated from message silvana.rpc.v1.CoordinatorActiveEvent
 */
export type CoordinatorActiveEvent = Message<"silvana.rpc.v1.CoordinatorActiveEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: uint64 event_timestamp = 2;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.CoordinatorActiveEvent.
 * Use `create(CoordinatorActiveEventSchema)` to create a new message.
 */
export const CoordinatorActiveEventSchema: GenMessage<CoordinatorActiveEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 1);

/**
 * @generated from message silvana.rpc.v1.CoordinatorShutdownEvent
 */
export type CoordinatorShutdownEvent = Message<"silvana.rpc.v1.CoordinatorShutdownEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: uint64 event_timestamp = 2;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.CoordinatorShutdownEvent.
 * Use `create(CoordinatorShutdownEventSchema)` to create a new message.
 */
export const CoordinatorShutdownEventSchema: GenMessage<CoordinatorShutdownEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 2);

/**
 * @generated from message silvana.rpc.v1.AgentSessionStartedEvent
 */
export type AgentSessionStartedEvent = Message<"silvana.rpc.v1.AgentSessionStartedEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string developer = 2;
   */
  developer: string;

  /**
   * @generated from field: string agent = 3;
   */
  agent: string;

  /**
   * @generated from field: string agent_method = 4;
   */
  agentMethod: string;

  /**
   * @generated from field: string session_id = 5;
   */
  sessionId: string;

  /**
   * @generated from field: uint64 event_timestamp = 6;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.AgentSessionStartedEvent.
 * Use `create(AgentSessionStartedEventSchema)` to create a new message.
 */
export const AgentSessionStartedEventSchema: GenMessage<AgentSessionStartedEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 3);

/**
 * @generated from message silvana.rpc.v1.AgentSessionFinishedEvent
 */
export type AgentSessionFinishedEvent = Message<"silvana.rpc.v1.AgentSessionFinishedEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string session_log = 3;
   */
  sessionLog: string;

  /**
   * @generated from field: uint64 duration = 4;
   */
  duration: bigint;

  /**
   * @generated from field: uint64 cost = 5;
   */
  cost: bigint;

  /**
   * @generated from field: uint64 event_timestamp = 6;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.AgentSessionFinishedEvent.
 * Use `create(AgentSessionFinishedEventSchema)` to create a new message.
 */
export const AgentSessionFinishedEventSchema: GenMessage<AgentSessionFinishedEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 4);

/**
 * @generated from message silvana.rpc.v1.JobCreatedEvent
 */
export type JobCreatedEvent = Message<"silvana.rpc.v1.JobCreatedEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string app_instance_id = 3;
   */
  appInstanceId: string;

  /**
   * @generated from field: string app_method = 4;
   */
  appMethod: string;

  /**
   * @generated from field: uint64 job_sequence = 5;
   */
  jobSequence: bigint;

  /**
   * @generated from field: repeated uint64 sequences = 6;
   */
  sequences: bigint[];

  /**
   * @generated from field: repeated uint64 merged_sequences_1 = 7;
   */
  mergedSequences1: bigint[];

  /**
   * @generated from field: repeated uint64 merged_sequences_2 = 8;
   */
  mergedSequences2: bigint[];

  /**
   * @generated from field: string job_id = 9;
   */
  jobId: string;

  /**
   * @generated from field: uint64 event_timestamp = 10;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.JobCreatedEvent.
 * Use `create(JobCreatedEventSchema)` to create a new message.
 */
export const JobCreatedEventSchema: GenMessage<JobCreatedEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 5);

/**
 * @generated from message silvana.rpc.v1.JobStartedEvent
 */
export type JobStartedEvent = Message<"silvana.rpc.v1.JobStartedEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string app_instance_id = 3;
   */
  appInstanceId: string;

  /**
   * @generated from field: string job_id = 4;
   */
  jobId: string;

  /**
   * @generated from field: uint64 event_timestamp = 5;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.JobStartedEvent.
 * Use `create(JobStartedEventSchema)` to create a new message.
 */
export const JobStartedEventSchema: GenMessage<JobStartedEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 6);

/**
 * @generated from message silvana.rpc.v1.JobFinishedEvent
 */
export type JobFinishedEvent = Message<"silvana.rpc.v1.JobFinishedEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string job_id = 2;
   */
  jobId: string;

  /**
   * @generated from field: uint64 duration = 3;
   */
  duration: bigint;

  /**
   * @generated from field: uint64 cost = 4;
   */
  cost: bigint;

  /**
   * @generated from field: uint64 event_timestamp = 5;
   */
  eventTimestamp: bigint;

  /**
   * @generated from field: silvana.rpc.v1.JobResult result = 6;
   */
  result: JobResult;
};

/**
 * Describes the message silvana.rpc.v1.JobFinishedEvent.
 * Use `create(JobFinishedEventSchema)` to create a new message.
 */
export const JobFinishedEventSchema: GenMessage<JobFinishedEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 7);

/**
 * @generated from message silvana.rpc.v1.CoordinationTxEvent
 */
export type CoordinationTxEvent = Message<"silvana.rpc.v1.CoordinationTxEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string tx_hash = 2;
   */
  txHash: string;

  /**
   * @generated from field: uint64 event_timestamp = 3;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.CoordinationTxEvent.
 * Use `create(CoordinationTxEventSchema)` to create a new message.
 */
export const CoordinationTxEventSchema: GenMessage<CoordinationTxEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 8);

/**
 * @generated from message silvana.rpc.v1.CoordinatorMessageEvent
 */
export type CoordinatorMessageEvent = Message<"silvana.rpc.v1.CoordinatorMessageEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: uint64 event_timestamp = 2;
   */
  eventTimestamp: bigint;

  /**
   * @generated from field: silvana.rpc.v1.LogLevel level = 3;
   */
  level: LogLevel;

  /**
   * @generated from field: string message = 4;
   */
  message: string;
};

/**
 * Describes the message silvana.rpc.v1.CoordinatorMessageEvent.
 * Use `create(CoordinatorMessageEventSchema)` to create a new message.
 */
export const CoordinatorMessageEventSchema: GenMessage<CoordinatorMessageEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 9);

/**
 * @generated from message silvana.rpc.v1.ProofEvent
 */
export type ProofEvent = Message<"silvana.rpc.v1.ProofEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string app_instance_id = 3;
   */
  appInstanceId: string;

  /**
   * @generated from field: string job_id = 4;
   */
  jobId: string;

  /**
   * @generated from field: string data_availability = 5;
   */
  dataAvailability: string;

  /**
   * @generated from field: uint64 block_number = 6;
   */
  blockNumber: bigint;

  /**
   * @generated from field: optional bool block_proof = 7;
   */
  blockProof?: boolean;

  /**
   * @generated from field: silvana.rpc.v1.ProofEventType proof_event_type = 8;
   */
  proofEventType: ProofEventType;

  /**
   * @generated from field: repeated uint64 sequences = 9;
   */
  sequences: bigint[];

  /**
   * @generated from field: repeated uint64 merged_sequences_1 = 10;
   */
  mergedSequences1: bigint[];

  /**
   * @generated from field: repeated uint64 merged_sequences_2 = 11;
   */
  mergedSequences2: bigint[];

  /**
   * @generated from field: uint64 event_timestamp = 12;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.ProofEvent.
 * Use `create(ProofEventSchema)` to create a new message.
 */
export const ProofEventSchema: GenMessage<ProofEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 10);

/**
 * @generated from message silvana.rpc.v1.SettlementTransactionEvent
 */
export type SettlementTransactionEvent = Message<"silvana.rpc.v1.SettlementTransactionEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string app_instance_id = 3;
   */
  appInstanceId: string;

  /**
   * @generated from field: string chain = 4;
   */
  chain: string;

  /**
   * @generated from field: string job_id = 5;
   */
  jobId: string;

  /**
   * @generated from field: uint64 block_number = 6;
   */
  blockNumber: bigint;

  /**
   * @generated from field: string tx_hash = 7;
   */
  txHash: string;

  /**
   * @generated from field: uint64 event_timestamp = 8;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.SettlementTransactionEvent.
 * Use `create(SettlementTransactionEventSchema)` to create a new message.
 */
export const SettlementTransactionEventSchema: GenMessage<SettlementTransactionEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 11);

/**
 * @generated from message silvana.rpc.v1.SettlementTransactionIncludedInBlockEvent
 */
export type SettlementTransactionIncludedInBlockEvent = Message<"silvana.rpc.v1.SettlementTransactionIncludedInBlockEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string app_instance_id = 3;
   */
  appInstanceId: string;

  /**
   * @generated from field: string chain = 4;
   */
  chain: string;

  /**
   * @generated from field: string job_id = 5;
   */
  jobId: string;

  /**
   * @generated from field: uint64 block_number = 6;
   */
  blockNumber: bigint;

  /**
   * @generated from field: uint64 event_timestamp = 7;
   */
  eventTimestamp: bigint;
};

/**
 * Describes the message silvana.rpc.v1.SettlementTransactionIncludedInBlockEvent.
 * Use `create(SettlementTransactionIncludedInBlockEventSchema)` to create a new message.
 */
export const SettlementTransactionIncludedInBlockEventSchema: GenMessage<SettlementTransactionIncludedInBlockEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 12);

/**
 * Agent Events
 *
 * @generated from message silvana.rpc.v1.AgentMessageEvent
 */
export type AgentMessageEvent = Message<"silvana.rpc.v1.AgentMessageEvent"> & {
  /**
   * @generated from field: string coordinator_id = 1;
   */
  coordinatorId: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: optional string job_id = 3;
   */
  jobId?: string;

  /**
   * @generated from field: uint64 event_timestamp = 4;
   */
  eventTimestamp: bigint;

  /**
   * @generated from field: silvana.rpc.v1.LogLevel level = 5;
   */
  level: LogLevel;

  /**
   * @generated from field: string message = 6;
   */
  message: string;
};

/**
 * Describes the message silvana.rpc.v1.AgentMessageEvent.
 * Use `create(AgentMessageEventSchema)` to create a new message.
 */
export const AgentMessageEventSchema: GenMessage<AgentMessageEvent> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 13);

/**
 * Main event wrapper
 *
 * @generated from message silvana.rpc.v1.Event
 */
export type Event = Message<"silvana.rpc.v1.Event"> & {
  /**
   * @generated from oneof silvana.rpc.v1.Event.event
   */
  event: {
    /**
     * Coordinator lifecycle events
     *
     * @generated from field: silvana.rpc.v1.CoordinatorStartedEvent coordinator_started = 1;
     */
    value: CoordinatorStartedEvent;
    case: "coordinatorStarted";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.CoordinatorActiveEvent coordinator_active = 2;
     */
    value: CoordinatorActiveEvent;
    case: "coordinatorActive";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.CoordinatorShutdownEvent coordinator_shutdown = 3;
     */
    value: CoordinatorShutdownEvent;
    case: "coordinatorShutdown";
  } | {
    /**
     * Session and job events
     *
     * @generated from field: silvana.rpc.v1.AgentSessionStartedEvent agent_session_started = 4;
     */
    value: AgentSessionStartedEvent;
    case: "agentSessionStarted";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.AgentSessionFinishedEvent agent_session_finished = 14;
     */
    value: AgentSessionFinishedEvent;
    case: "agentSessionFinished";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.JobCreatedEvent job_created = 5;
     */
    value: JobCreatedEvent;
    case: "jobCreated";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.JobStartedEvent job_started = 6;
     */
    value: JobStartedEvent;
    case: "jobStarted";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.JobFinishedEvent job_finished = 7;
     */
    value: JobFinishedEvent;
    case: "jobFinished";
  } | {
    /**
     * Transaction and proof events
     *
     * @generated from field: silvana.rpc.v1.CoordinationTxEvent coordination_tx = 8;
     */
    value: CoordinationTxEvent;
    case: "coordinationTx";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.ProofEvent proof_event = 9;
     */
    value: ProofEvent;
    case: "proofEvent";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.SettlementTransactionEvent settlement_transaction = 10;
     */
    value: SettlementTransactionEvent;
    case: "settlementTransaction";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.SettlementTransactionIncludedInBlockEvent settlement_transaction_included = 11;
     */
    value: SettlementTransactionIncludedInBlockEvent;
    case: "settlementTransactionIncluded";
  } | {
    /**
     * Message events
     *
     * @generated from field: silvana.rpc.v1.CoordinatorMessageEvent coordinator_message = 12;
     */
    value: CoordinatorMessageEvent;
    case: "coordinatorMessage";
  } | {
    /**
     * @generated from field: silvana.rpc.v1.AgentMessageEvent agent_message = 13;
     */
    value: AgentMessageEvent;
    case: "agentMessage";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message silvana.rpc.v1.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export const EventSchema: GenMessage<Event> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 14);

/**
 * Batch events request
 *
 * @generated from message silvana.rpc.v1.SubmitEventsRequest
 */
export type SubmitEventsRequest = Message<"silvana.rpc.v1.SubmitEventsRequest"> & {
  /**
   * @generated from field: repeated silvana.rpc.v1.Event events = 1;
   */
  events: Event[];
};

/**
 * Describes the message silvana.rpc.v1.SubmitEventsRequest.
 * Use `create(SubmitEventsRequestSchema)` to create a new message.
 */
export const SubmitEventsRequestSchema: GenMessage<SubmitEventsRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 15);

/**
 * @generated from message silvana.rpc.v1.SubmitEventsResponse
 */
export type SubmitEventsResponse = Message<"silvana.rpc.v1.SubmitEventsResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: uint32 processed_count = 3;
   */
  processedCount: number;
};

/**
 * Describes the message silvana.rpc.v1.SubmitEventsResponse.
 * Use `create(SubmitEventsResponseSchema)` to create a new message.
 */
export const SubmitEventsResponseSchema: GenMessage<SubmitEventsResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 16);

/**
 * New messages for single-event submission
 *
 * @generated from message silvana.rpc.v1.SubmitEventRequest
 */
export type SubmitEventRequest = Message<"silvana.rpc.v1.SubmitEventRequest"> & {
  /**
   * @generated from field: silvana.rpc.v1.Event event = 1;
   */
  event?: Event;
};

/**
 * Describes the message silvana.rpc.v1.SubmitEventRequest.
 * Use `create(SubmitEventRequestSchema)` to create a new message.
 */
export const SubmitEventRequestSchema: GenMessage<SubmitEventRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 17);

/**
 * @generated from message silvana.rpc.v1.SubmitEventResponse
 */
export type SubmitEventResponse = Message<"silvana.rpc.v1.SubmitEventResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: uint32 processed_count = 3;
   */
  processedCount: number;
};

/**
 * Describes the message silvana.rpc.v1.SubmitEventResponse.
 * Use `create(SubmitEventResponseSchema)` to create a new message.
 */
export const SubmitEventResponseSchema: GenMessage<SubmitEventResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 18);

/**
 * Query request/response messages for getting events by sequence
 *
 * @generated from message silvana.rpc.v1.GetEventsByAppInstanceSequenceRequest
 */
export type GetEventsByAppInstanceSequenceRequest = Message<"silvana.rpc.v1.GetEventsByAppInstanceSequenceRequest"> & {
  /**
   * @generated from field: string app_instance_id = 1;
   */
  appInstanceId: string;

  /**
   * @generated from field: uint64 sequence = 2;
   */
  sequence: bigint;

  /**
   * Optional pagination limit
   *
   * @generated from field: optional uint32 limit = 3;
   */
  limit?: number;

  /**
   * Optional pagination offset
   *
   * @generated from field: optional uint32 offset = 4;
   */
  offset?: number;
};

/**
 * Describes the message silvana.rpc.v1.GetEventsByAppInstanceSequenceRequest.
 * Use `create(GetEventsByAppInstanceSequenceRequestSchema)` to create a new message.
 */
export const GetEventsByAppInstanceSequenceRequestSchema: GenMessage<GetEventsByAppInstanceSequenceRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 19);

/**
 * @generated from message silvana.rpc.v1.GetEventsByAppInstanceSequenceResponse
 */
export type GetEventsByAppInstanceSequenceResponse = Message<"silvana.rpc.v1.GetEventsByAppInstanceSequenceResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: repeated silvana.rpc.v1.Event events = 3;
   */
  events: Event[];

  /**
   * Total matching events (for pagination)
   *
   * @generated from field: uint32 total_count = 4;
   */
  totalCount: number;

  /**
   * Number of events in this response
   *
   * @generated from field: uint32 returned_count = 5;
   */
  returnedCount: number;
};

/**
 * Describes the message silvana.rpc.v1.GetEventsByAppInstanceSequenceResponse.
 * Use `create(GetEventsByAppInstanceSequenceResponseSchema)` to create a new message.
 */
export const GetEventsByAppInstanceSequenceResponseSchema: GenMessage<GetEventsByAppInstanceSequenceResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 20);

/**
 * Full-text search request/response messages for CoordinatorMessageEvent
 *
 * @generated from message silvana.rpc.v1.SearchEventsRequest
 */
export type SearchEventsRequest = Message<"silvana.rpc.v1.SearchEventsRequest"> & {
  /**
   * Search terms for full-text search
   *
   * @generated from field: string search_query = 1;
   */
  searchQuery: string;

  /**
   * Optional limit per fulltext index
   *
   * @generated from field: optional uint32 limit = 2;
   */
  limit?: number;
};

/**
 * Describes the message silvana.rpc.v1.SearchEventsRequest.
 * Use `create(SearchEventsRequestSchema)` to create a new message.
 */
export const SearchEventsRequestSchema: GenMessage<SearchEventsRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 21);

/**
 * @generated from message silvana.rpc.v1.EventWithRelevance
 */
export type EventWithRelevance = Message<"silvana.rpc.v1.EventWithRelevance"> & {
  /**
   * Database ID
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: silvana.rpc.v1.Event event = 2;
   */
  event?: Event;

  /**
   * TiDB FTS relevance score (BM25)
   *
   * @generated from field: double relevance_score = 3;
   */
  relevanceScore: number;
};

/**
 * Describes the message silvana.rpc.v1.EventWithRelevance.
 * Use `create(EventWithRelevanceSchema)` to create a new message.
 */
export const EventWithRelevanceSchema: GenMessage<EventWithRelevance> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 22);

/**
 * @generated from message silvana.rpc.v1.SearchEventsResponse
 */
export type SearchEventsResponse = Message<"silvana.rpc.v1.SearchEventsResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: repeated silvana.rpc.v1.EventWithRelevance events = 3;
   */
  events: EventWithRelevance[];
};

/**
 * Describes the message silvana.rpc.v1.SearchEventsResponse.
 * Use `create(SearchEventsResponseSchema)` to create a new message.
 */
export const SearchEventsResponseSchema: GenMessage<SearchEventsResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 23);

/**
 * Quilt piece for bundling multiple proofs
 *
 * @generated from message silvana.rpc.v1.QuiltPiece
 */
export type QuiltPiece = Message<"silvana.rpc.v1.QuiltPiece"> & {
  /**
   * @generated from field: string identifier = 1;
   */
  identifier: string;

  /**
   * @generated from field: string data = 2;
   */
  data: string;
};

/**
 * Describes the message silvana.rpc.v1.QuiltPiece.
 * Use `create(QuiltPieceSchema)` to create a new message.
 */
export const QuiltPieceSchema: GenMessage<QuiltPiece> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 24);

/**
 * @generated from message silvana.rpc.v1.SubmitProofRequest
 */
export type SubmitProofRequest = Message<"silvana.rpc.v1.SubmitProofRequest"> & {
  /**
   * @generated from oneof silvana.rpc.v1.SubmitProofRequest.data
   */
  data: {
    /**
     * Single proof data
     *
     * @generated from field: string proof_data = 1;
     */
    value: string;
    case: "proofData";
  } | {
    /**
     * Multiple proofs as a quilt
     *
     * @generated from field: silvana.rpc.v1.QuiltData quilt_data = 4;
     */
    value: QuiltData;
    case: "quiltData";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: map<string, string> metadata = 2;
   */
  metadata: { [key: string]: string };

  /**
   * Unix timestamp in milliseconds
   *
   * @generated from field: optional uint64 expires_at = 3;
   */
  expiresAt?: bigint;
};

/**
 * Describes the message silvana.rpc.v1.SubmitProofRequest.
 * Use `create(SubmitProofRequestSchema)` to create a new message.
 */
export const SubmitProofRequestSchema: GenMessage<SubmitProofRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 25);

/**
 * @generated from message silvana.rpc.v1.QuiltData
 */
export type QuiltData = Message<"silvana.rpc.v1.QuiltData"> & {
  /**
   * @generated from field: repeated silvana.rpc.v1.QuiltPiece pieces = 1;
   */
  pieces: QuiltPiece[];
};

/**
 * Describes the message silvana.rpc.v1.QuiltData.
 * Use `create(QuiltDataSchema)` to create a new message.
 */
export const QuiltDataSchema: GenMessage<QuiltData> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 26);

/**
 * @generated from message silvana.rpc.v1.SubmitProofResponse
 */
export type SubmitProofResponse = Message<"silvana.rpc.v1.SubmitProofResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * The hash of the submitted proof or quilt
   *
   * @generated from field: string proof_hash = 3;
   */
  proofHash: string;

  /**
   * Optional: IDs of individual quilt pieces
   *
   * @generated from field: repeated string quilt_piece_ids = 4;
   */
  quiltPieceIds: string[];
};

/**
 * Describes the message silvana.rpc.v1.SubmitProofResponse.
 * Use `create(SubmitProofResponseSchema)` to create a new message.
 */
export const SubmitProofResponseSchema: GenMessage<SubmitProofResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 27);

/**
 * @generated from message silvana.rpc.v1.GetProofRequest
 */
export type GetProofRequest = Message<"silvana.rpc.v1.GetProofRequest"> & {
  /**
   * @generated from field: string proof_hash = 1;
   */
  proofHash: string;

  /**
   * Optional: for quilts, get specific block's proof
   *
   * @generated from field: optional string block_number = 2;
   */
  blockNumber?: string;
};

/**
 * Describes the message silvana.rpc.v1.GetProofRequest.
 * Use `create(GetProofRequestSchema)` to create a new message.
 */
export const GetProofRequestSchema: GenMessage<GetProofRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 28);

/**
 * @generated from message silvana.rpc.v1.GetProofResponse
 */
export type GetProofResponse = Message<"silvana.rpc.v1.GetProofResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: string proof_data = 3;
   */
  proofData: string;

  /**
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string };

  /**
   * Indicates if this is a quilt
   *
   * @generated from field: bool is_quilt = 5;
   */
  isQuilt: boolean;

  /**
   * If is_quilt=true, contains the pieces
   *
   * @generated from field: repeated silvana.rpc.v1.QuiltPiece quilt_pieces = 6;
   */
  quiltPieces: QuiltPiece[];
};

/**
 * Describes the message silvana.rpc.v1.GetProofResponse.
 * Use `create(GetProofResponseSchema)` to create a new message.
 */
export const GetProofResponseSchema: GenMessage<GetProofResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 29);

/**
 * @generated from message silvana.rpc.v1.GetConfigRequest
 */
export type GetConfigRequest = Message<"silvana.rpc.v1.GetConfigRequest"> & {
  /**
   * Chain identifier (testnet/devnet/mainnet)
   *
   * @generated from field: string chain = 1;
   */
  chain: string;
};

/**
 * Describes the message silvana.rpc.v1.GetConfigRequest.
 * Use `create(GetConfigRequestSchema)` to create a new message.
 */
export const GetConfigRequestSchema: GenMessage<GetConfigRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 30);

/**
 * @generated from message silvana.rpc.v1.GetConfigResponse
 */
export type GetConfigResponse = Message<"silvana.rpc.v1.GetConfigResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * Key-value configuration pairs
   *
   * @generated from field: map<string, string> config = 3;
   */
  config: { [key: string]: string };
};

/**
 * Describes the message silvana.rpc.v1.GetConfigResponse.
 * Use `create(GetConfigResponseSchema)` to create a new message.
 */
export const GetConfigResponseSchema: GenMessage<GetConfigResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 31);

/**
 * @generated from message silvana.rpc.v1.WriteConfigRequest
 */
export type WriteConfigRequest = Message<"silvana.rpc.v1.WriteConfigRequest"> & {
  /**
   * Chain identifier (testnet/devnet/mainnet)
   *
   * @generated from field: string chain = 1;
   */
  chain: string;

  /**
   * Key-value configuration pairs to write
   *
   * @generated from field: map<string, string> config = 2;
   */
  config: { [key: string]: string };
};

/**
 * Describes the message silvana.rpc.v1.WriteConfigRequest.
 * Use `create(WriteConfigRequestSchema)` to create a new message.
 */
export const WriteConfigRequestSchema: GenMessage<WriteConfigRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 32);

/**
 * @generated from message silvana.rpc.v1.WriteConfigResponse
 */
export type WriteConfigResponse = Message<"silvana.rpc.v1.WriteConfigResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * Number of configuration items written
   *
   * @generated from field: uint32 items_written = 3;
   */
  itemsWritten: number;
};

/**
 * Describes the message silvana.rpc.v1.WriteConfigResponse.
 * Use `create(WriteConfigResponseSchema)` to create a new message.
 */
export const WriteConfigResponseSchema: GenMessage<WriteConfigResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 33);

/**
 * @generated from message silvana.rpc.v1.WriteBinaryRequest
 */
export type WriteBinaryRequest = Message<"silvana.rpc.v1.WriteBinaryRequest"> & {
  /**
   * Binary data to store
   *
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * S3 object key/filename
   *
   * @generated from field: string file_name = 2;
   */
  fileName: string;

  /**
   * MIME type of the content
   *
   * @generated from field: string mime_type = 3;
   */
  mimeType: string;

  /**
   * Optional expected SHA256 for verification
   *
   * @generated from field: optional string expected_sha256 = 4;
   */
  expectedSha256?: string;

  /**
   * Optional metadata
   *
   * @generated from field: map<string, string> metadata = 5;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message silvana.rpc.v1.WriteBinaryRequest.
 * Use `create(WriteBinaryRequestSchema)` to create a new message.
 */
export const WriteBinaryRequestSchema: GenMessage<WriteBinaryRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 34);

/**
 * @generated from message silvana.rpc.v1.WriteBinaryResponse
 */
export type WriteBinaryResponse = Message<"silvana.rpc.v1.WriteBinaryResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * SHA256 hash of the stored file
   *
   * @generated from field: string sha256 = 3;
   */
  sha256: string;

  /**
   * S3 URL/path of the stored file
   *
   * @generated from field: string s3_url = 4;
   */
  s3Url: string;
};

/**
 * Describes the message silvana.rpc.v1.WriteBinaryResponse.
 * Use `create(WriteBinaryResponseSchema)` to create a new message.
 */
export const WriteBinaryResponseSchema: GenMessage<WriteBinaryResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 35);

/**
 * @generated from message silvana.rpc.v1.ReadBinaryRequest
 */
export type ReadBinaryRequest = Message<"silvana.rpc.v1.ReadBinaryRequest"> & {
  /**
   * S3 object key/filename to read
   *
   * @generated from field: string file_name = 1;
   */
  fileName: string;
};

/**
 * Describes the message silvana.rpc.v1.ReadBinaryRequest.
 * Use `create(ReadBinaryRequestSchema)` to create a new message.
 */
export const ReadBinaryRequestSchema: GenMessage<ReadBinaryRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 36);

/**
 * @generated from message silvana.rpc.v1.ReadBinaryResponse
 */
export type ReadBinaryResponse = Message<"silvana.rpc.v1.ReadBinaryResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * Binary data retrieved
   *
   * @generated from field: bytes data = 3;
   */
  data: Uint8Array;

  /**
   * SHA256 hash of the data
   *
   * @generated from field: string sha256 = 4;
   */
  sha256: string;

  /**
   * MIME type if available
   *
   * @generated from field: string mime_type = 5;
   */
  mimeType: string;

  /**
   * Associated metadata
   *
   * @generated from field: map<string, string> metadata = 6;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message silvana.rpc.v1.ReadBinaryResponse.
 * Use `create(ReadBinaryResponseSchema)` to create a new message.
 */
export const ReadBinaryResponseSchema: GenMessage<ReadBinaryResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 37);

/**
 * Secrets storage messages
 *
 * @generated from message silvana.rpc.v1.SecretReference
 */
export type SecretReference = Message<"silvana.rpc.v1.SecretReference"> & {
  /**
   * @generated from field: string developer = 1;
   */
  developer: string;

  /**
   * @generated from field: string agent = 2;
   */
  agent: string;

  /**
   * @generated from field: optional string app = 3;
   */
  app?: string;

  /**
   * @generated from field: optional string app_instance = 4;
   */
  appInstance?: string;

  /**
   * @generated from field: optional string name = 5;
   */
  name?: string;
};

/**
 * Describes the message silvana.rpc.v1.SecretReference.
 * Use `create(SecretReferenceSchema)` to create a new message.
 */
export const SecretReferenceSchema: GenMessage<SecretReference> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 38);

/**
 * @generated from message silvana.rpc.v1.StoreSecretRequest
 */
export type StoreSecretRequest = Message<"silvana.rpc.v1.StoreSecretRequest"> & {
  /**
   * @generated from field: silvana.rpc.v1.SecretReference reference = 1;
   */
  reference?: SecretReference;

  /**
   * @generated from field: string secret_value = 2;
   */
  secretValue: string;

  /**
   * Developer signature (not validated yet)
   *
   * @generated from field: bytes signature = 3;
   */
  signature: Uint8Array;
};

/**
 * Describes the message silvana.rpc.v1.StoreSecretRequest.
 * Use `create(StoreSecretRequestSchema)` to create a new message.
 */
export const StoreSecretRequestSchema: GenMessage<StoreSecretRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 39);

/**
 * @generated from message silvana.rpc.v1.StoreSecretResponse
 */
export type StoreSecretResponse = Message<"silvana.rpc.v1.StoreSecretResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message silvana.rpc.v1.StoreSecretResponse.
 * Use `create(StoreSecretResponseSchema)` to create a new message.
 */
export const StoreSecretResponseSchema: GenMessage<StoreSecretResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 40);

/**
 * @generated from message silvana.rpc.v1.RetrieveSecretRequest
 */
export type RetrieveSecretRequest = Message<"silvana.rpc.v1.RetrieveSecretRequest"> & {
  /**
   * @generated from field: silvana.rpc.v1.SecretReference reference = 1;
   */
  reference?: SecretReference;

  /**
   * Coordinator signature (not validated yet)
   *
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;
};

/**
 * Describes the message silvana.rpc.v1.RetrieveSecretRequest.
 * Use `create(RetrieveSecretRequestSchema)` to create a new message.
 */
export const RetrieveSecretRequestSchema: GenMessage<RetrieveSecretRequest> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 41);

/**
 * @generated from message silvana.rpc.v1.RetrieveSecretResponse
 */
export type RetrieveSecretResponse = Message<"silvana.rpc.v1.RetrieveSecretResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * Only returned if success is true
   *
   * @generated from field: string secret_value = 3;
   */
  secretValue: string;
};

/**
 * Describes the message silvana.rpc.v1.RetrieveSecretResponse.
 * Use `create(RetrieveSecretResponseSchema)` to create a new message.
 */
export const RetrieveSecretResponseSchema: GenMessage<RetrieveSecretResponse> = /*@__PURE__*/
  messageDesc(file_silvana_rpc_v1_rpc, 42);

/**
 * Log level enumeration for messages
 *
 * @generated from enum silvana.rpc.v1.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: LOG_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LOG_LEVEL_DEBUG = 1;
   */
  DEBUG = 1,

  /**
   * @generated from enum value: LOG_LEVEL_INFO = 2;
   */
  INFO = 2,

  /**
   * @generated from enum value: LOG_LEVEL_WARN = 3;
   */
  WARN = 3,

  /**
   * @generated from enum value: LOG_LEVEL_ERROR = 4;
   */
  ERROR = 4,

  /**
   * @generated from enum value: LOG_LEVEL_FATAL = 5;
   */
  FATAL = 5,
}

/**
 * Describes the enum silvana.rpc.v1.LogLevel.
 */
export const LogLevelSchema: GenEnum<LogLevel> = /*@__PURE__*/
  enumDesc(file_silvana_rpc_v1_rpc, 0);

/**
 * Job result enumeration
 *
 * @generated from enum silvana.rpc.v1.JobResult
 */
export enum JobResult {
  /**
   * @generated from enum value: JOB_RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: JOB_RESULT_COMPLETED = 1;
   */
  COMPLETED = 1,

  /**
   * @generated from enum value: JOB_RESULT_FAILED = 2;
   */
  FAILED = 2,

  /**
   * @generated from enum value: JOB_RESULT_TERMINATED = 3;
   */
  TERMINATED = 3,
}

/**
 * Describes the enum silvana.rpc.v1.JobResult.
 */
export const JobResultSchema: GenEnum<JobResult> = /*@__PURE__*/
  enumDesc(file_silvana_rpc_v1_rpc, 1);

/**
 * Job result enumeration
 *
 * @generated from enum silvana.rpc.v1.ProofEventType
 */
export enum ProofEventType {
  /**
   * @generated from enum value: PROOF_EVENT_TYPE_UNSPECIFIED = 0;
   */
  PROOF_EVENT_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROOF_SUBMITTED = 1;
   */
  PROOF_SUBMITTED = 1,

  /**
   * @generated from enum value: PROOF_FETCHED = 2;
   */
  PROOF_FETCHED = 2,

  /**
   * @generated from enum value: PROOF_VERIFIED = 3;
   */
  PROOF_VERIFIED = 3,

  /**
   * @generated from enum value: PROOF_UNAVAILABLE = 5;
   */
  PROOF_UNAVAILABLE = 5,

  /**
   * @generated from enum value: PROOF_REJECTED = 6;
   */
  PROOF_REJECTED = 6,
}

/**
 * Describes the enum silvana.rpc.v1.ProofEventType.
 */
export const ProofEventTypeSchema: GenEnum<ProofEventType> = /*@__PURE__*/
  enumDesc(file_silvana_rpc_v1_rpc, 2);

/**
 * gRPC service definition
 *
 * @generated from service silvana.rpc.v1.SilvanaRpcService
 */
export const SilvanaRpcService: GenService<{
  /**
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.SubmitEvents
   */
  submitEvents: {
    methodKind: "unary";
    input: typeof SubmitEventsRequestSchema;
    output: typeof SubmitEventsResponseSchema;
  },
  /**
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.SubmitEvent
   */
  submitEvent: {
    methodKind: "unary";
    input: typeof SubmitEventRequestSchema;
    output: typeof SubmitEventResponseSchema;
  },
  /**
   * Query methods for retrieving events by sequence
   *
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.GetEventsByAppInstanceSequence
   */
  getEventsByAppInstanceSequence: {
    methodKind: "unary";
    input: typeof GetEventsByAppInstanceSequenceRequestSchema;
    output: typeof GetEventsByAppInstanceSequenceResponseSchema;
  },
  /**
   * Full-text search methods
   *
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.SearchEvents
   */
  searchEvents: {
    methodKind: "unary";
    input: typeof SearchEventsRequestSchema;
    output: typeof SearchEventsResponseSchema;
  },
  /**
   * Proof cache methods
   *
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.SubmitProof
   */
  submitProof: {
    methodKind: "unary";
    input: typeof SubmitProofRequestSchema;
    output: typeof SubmitProofResponseSchema;
  },
  /**
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.GetProof
   */
  getProof: {
    methodKind: "unary";
    input: typeof GetProofRequestSchema;
    output: typeof GetProofResponseSchema;
  },
  /**
   * Secrets storage methods
   *
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.StoreSecret
   */
  storeSecret: {
    methodKind: "unary";
    input: typeof StoreSecretRequestSchema;
    output: typeof StoreSecretResponseSchema;
  },
  /**
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.RetrieveSecret
   */
  retrieveSecret: {
    methodKind: "unary";
    input: typeof RetrieveSecretRequestSchema;
    output: typeof RetrieveSecretResponseSchema;
  },
  /**
   * Binary storage methods
   *
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.WriteBinary
   */
  writeBinary: {
    methodKind: "unary";
    input: typeof WriteBinaryRequestSchema;
    output: typeof WriteBinaryResponseSchema;
  },
  /**
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.ReadBinary
   */
  readBinary: {
    methodKind: "unary";
    input: typeof ReadBinaryRequestSchema;
    output: typeof ReadBinaryResponseSchema;
  },
  /**
   * Configuration storage methods
   *
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.GetConfig
   */
  getConfig: {
    methodKind: "unary";
    input: typeof GetConfigRequestSchema;
    output: typeof GetConfigResponseSchema;
  },
  /**
   * @generated from rpc silvana.rpc.v1.SilvanaRpcService.WriteConfig
   */
  writeConfig: {
    methodKind: "unary";
    input: typeof WriteConfigRequestSchema;
    output: typeof WriteConfigResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_silvana_rpc_v1_rpc, 0);

